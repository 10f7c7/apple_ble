
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__ams_server_glue_hpp__adaptor__H__
#define __sdbuscpp__ams_server_glue_hpp__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>
#include "ble-const.hpp"

namespace org {
    namespace mpris {

        class MediaPlayer2_adaptor
        {
        public:
            static constexpr const char* INTERFACE_NAME = "org.mpris.MediaPlayer2";

        protected:
            MediaPlayer2_adaptor(sdbus::IObject& object)
                : m_object(object) {
            }

            MediaPlayer2_adaptor(const MediaPlayer2_adaptor&) = delete;
            MediaPlayer2_adaptor& operator=(const MediaPlayer2_adaptor&) = delete;
            MediaPlayer2_adaptor(MediaPlayer2_adaptor&&) = delete;
            MediaPlayer2_adaptor& operator=(MediaPlayer2_adaptor&&) = delete;

            ~MediaPlayer2_adaptor() = default;

            void registerAdaptor() {
                m_object.addVTable(sdbus::setInterfaceFlags().withPropertyUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                , sdbus::registerMethod("Raise").implementedAs([this]() { return this->Raise(); })
                    , sdbus::registerMethod("Quit").implementedAs([this]() { return this->Quit(); })
                    , sdbus::registerProperty("CanQuit").withGetter([this]() { return this->CanQuit(); })
                    , sdbus::registerProperty("CanRaise").withGetter([this]() { return this->CanRaise(); })
                    , sdbus::registerProperty("HasTrackList").withGetter([this]() { return this->HasTrackList(); })
                    , sdbus::registerProperty("Identity").withGetter([this]() { return this->Identity(); })
                    , sdbus::registerProperty("DesktopEntry").withGetter([this]() { return this->DesktopEntry(); })
                    , sdbus::registerProperty("SupportedUriSchemes").withGetter([this]() { return this->SupportedUriSchemes(); })
                    , sdbus::registerProperty("SupportedMimeTypes").withGetter([this]() { return this->SupportedMimeTypes(); })
                    ).forInterface(INTERFACE_NAME);
            }

        private:
            virtual void Raise() = 0;
            virtual void Quit() = 0;

        private:
            virtual bool CanQuit() = 0;
            virtual bool CanRaise() = 0;
            virtual bool HasTrackList() = 0;
            virtual std::string Identity() = 0;
            virtual std::string DesktopEntry() = 0;
            virtual std::vector<std::string> SupportedUriSchemes() = 0;
            virtual std::vector<std::string> SupportedMimeTypes() = 0;

        private:
            sdbus::IObject& m_object;
        };

    }
} // namespaces

namespace org {
    namespace mpris {
        namespace MediaPlayer2 {

            class Player_adaptor
            {
            public:
                static constexpr const char* INTERFACE_NAME = "org.mpris.MediaPlayer2.Player";

            protected:
                Player_adaptor(sdbus::IObject& object)
                    : m_object(object) {
                }

                Player_adaptor(const Player_adaptor&) = delete;
                Player_adaptor& operator=(const Player_adaptor&) = delete;
                Player_adaptor(Player_adaptor&&) = delete;
                Player_adaptor& operator=(Player_adaptor&&) = delete;

                ~Player_adaptor() = default;

                void registerAdaptor() {
                    m_object.addVTable(sdbus::registerMethod("Next").implementedAs([this]() { return this->Next(); })
                        , sdbus::registerMethod("Previous").implementedAs([this]() { return this->Previous(); })
                        , sdbus::registerMethod("Pause").implementedAs([this]() { return this->Pause(); })
                        , sdbus::registerMethod("PlayPause").implementedAs([this]() { return this->PlayPause(); })
                        , sdbus::registerMethod("Stop").implementedAs([this]() { return this->Stop(); })
                        , sdbus::registerMethod("Play").implementedAs([this]() { return this->Play(); })
                        , sdbus::registerMethod("Seek").withInputParamNames("Offset").implementedAs([this](const int64_t& Offset) { return this->Seek(Offset); })
                        , sdbus::registerMethod("SetPosition").withInputParamNames("TrackId", "Position").implementedAs([this](const sdbus::ObjectPath& TrackId, const int64_t& Position) { return this->SetPosition(TrackId, Position); })
                        , sdbus::registerMethod("OpenUri").withInputParamNames("Uri").implementedAs([this](const std::string& Uri) { return this->OpenUri(Uri); })
                        , sdbus::registerSignal("Seeked").withParameters<int64_t>("Position")
                        , sdbus::registerProperty("PlaybackStatus").withGetter([this]() { return this->PlaybackStatus(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("Rate").withGetter([this]() { return this->Rate(); }).withSetter([this](const double& value) { this->Rate(value); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("Metadata").withGetter([this]() { return this->Metadata(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("Volume").withGetter([this]() { return this->Volume(); }).withSetter([this](const double& value) { this->Volume(value); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("Position").withGetter([this]() { return this->Position(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("MinimumRate").withGetter([this]() { return this->MinimumRate(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("MaximumRate").withGetter([this]() { return this->MaximumRate(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("CanGoNext").withGetter([this]() { return this->CanGoNext(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("CanGoPrevious").withGetter([this]() { return this->CanGoPrevious(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("CanPlay").withGetter([this]() { return this->CanPlay(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("CanPause").withGetter([this]() { return this->CanPause(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("CanSeek").withGetter([this]() { return this->CanSeek(); }).withUpdateBehavior(sdbus::Flags::EMITS_CHANGE_SIGNAL)
                        , sdbus::registerProperty("CanControl").withGetter([this]() { return this->CanControl(); }).withUpdateBehavior(sdbus::Flags::EMITS_NO_SIGNAL)
                    ).forInterface(INTERFACE_NAME);
                }

            public:
                void emitSeeked(const int64_t& Position) {
                    m_object.emitSignal("Seeked").onInterface(INTERFACE_NAME).withArguments(Position);
                }

            private:
                virtual void Next() = 0;
                virtual void Previous() = 0;
                virtual void Pause() = 0;
                virtual void PlayPause() = 0;
                virtual void Stop() = 0;
                virtual void Play() = 0;
                virtual void Seek(const int64_t& Offset) = 0;
                virtual void SetPosition(const sdbus::ObjectPath& TrackId, const int64_t& Position) = 0;
                virtual void OpenUri(const std::string& Uri) = 0;

            private:
                virtual std::string PlaybackStatus() = 0;
                virtual double Rate() = 0;
                virtual void Rate(const double& value) = 0;
                virtual std::map<std::string, std::variant<int64_t, std::string, std::vector<std::string>>> Metadata() = 0;
                virtual double Volume() = 0;
                virtual void Volume(const double& value) = 0;
                virtual int64_t Position() = 0;
                virtual double MinimumRate() = 0;
                virtual double MaximumRate() = 0;
                virtual bool CanGoNext() = 0;
                virtual bool CanGoPrevious() = 0;
                virtual bool CanPlay() = 0;
                virtual bool CanPause() = 0;
                virtual bool CanSeek() = 0;
                virtual bool CanControl() = 0;

            private:
                sdbus::IObject& m_object;
            };

        }
    }
} // namespaces

#endif
